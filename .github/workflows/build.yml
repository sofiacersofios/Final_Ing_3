name: Build, Test and Deploy App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
        
    - name: Build and run 
      run: docker-compose up -d

  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Run Unit Tests
      working-directory: backend
      run: go test -v ./...
  
  publish-docker-image:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
  
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Tag and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_backend_1:latest ./backend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_frontend_1:latest ./frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_mysql-container_1:latest ./db
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_backend_1:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_frontend_1:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/final_ing_3_mysql-container_1:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  deploy:
    needs: publish-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Heroku Container Registry
        run: echo ${{ secrets.HEROKU_API_KEY }} | docker login -u=_ --password-stdin registry.heroku.com

      - name: Configure Heroku CLI
        run: |
          echo -e "machine api.heroku.com\n  login $HEROKU_EMAIL\n  password $HEROKU_API_KEY\nmachine git.heroku.com\n  login $HEROKU_EMAIL\n  password $HEROKU_API_KEY" > ~/.netrc
      
      - name: Build and push BACKEND
        working-directory: ./backend 
        run: |
          docker build -t backend .
          docker tag backend registry.heroku.com/backend-ing3/web
          docker push registry.heroku.com/backend-ing3/web

      - name: Release to Heroku BACKEND
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web -a backend-ing3
        
      - name: Activate Deployment on Heroku BACKEND
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku ps:scale web=1 -a backend-ing3

      - name: Build and push FRONTEND
        working-directory: ./frontend
        run: |
          docker build -t frontend .
          docker tag frontend registry.heroku.com/frontend-ing3/web
          docker push registry.heroku.com/frontend-ing3/web

      - name: Release to Heroku FRONTEND
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web -a frontend-ing3
        
      - name: Activate Deployment on Heroku FRONTEND
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku ps:scale web=1 -a frontend-ing3

  integration-test:
    needs: deploy
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
  
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
  
      - name: Install Dependencies and CodeceptJS
        working-directory: frontend
        run: |
          npx playwright install
          npm install
          sudo apt-get install -y xvfb
  
      - name: Run Integration Tests with xvfb-run
        working-directory: frontend
        run: xvfb-run -a npx codeceptjs run --steps -d
